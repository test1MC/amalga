<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="1667" MadCap:lastWidth="834" MadCap:fileTags="TopicType.Concept,TopicOwner.v-dennk,Status.50 - InTech Review,ReleaseTarget.TAP,Personas.Elvis: App Dev,EditingTags.1 - Ready for Edit" MadCap:conditions="Region.US">
    <head>
        <link href="../../Resources/Stylesheets/AmalgaMain.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1 style="font-style: normal;">Updating data with a command</h1>
        <p class="PersonaAppDev">&#160;</p>
        <p class="abstract">This topic describes how to use the ExecuteNonQuery method of the AmalgaDbCommand object in <MadCap:variable name="FeatureName.Amalga ADO.NET" /> to update data. </p>
        <p>SQL statements that modify data, such as the INSERT, UPDATE, or DELETE statement, do not return rows. To execute commands that do not return rows, create an <span class="ForeignCodeElements">AmalgaDbCommand</span> object with the appropriate SQL command, and then execute the command using the <span class="ForeignCodeElements">ExecuteNonQuery</span> method of the <span class="ForeignCodeElements">AmalgaDbCommand</span> object.</p>
        <p>The <span class="ForeignCodeElements">ExecuteNonQuery</span> method returns an integer that represents the number of rows affected by the statement that was executed. If multiple statements are executed, the value returned is the sum of the records affected by all of the statements executed. <a href="../Renamed Me.htm">MyNewTopic</a></p>
        <h2>Example</h2>
        <p>The following example demonstrates how to  use the <span class="ForeignCodeElements">ExecuteNonQuery</span> method to execute an <span class="ForeignCodeElements">AmalgaDbCommand</span> object that contains a SQL&#160;INSERT statement with named parameters.</p><pre xml:space="preserve">public void InsertPatientNote(string patientID, string noteText) 
{       
    // Instantiate a new AmalgaDbConnection object within a using block, with
    // a connection string returned by the GetVirtualSchemaConnectionString
    // method.

    using (AmalgaDbConnection connection = 
        new AmalgaDbConnection(this.GetVirtualSchemaConnectionString()))
    {
        // Create an AmalgaDBCommand object with a parameterized query that
        // writes a record into the PatientNote read/write application view.
        AmalgaDbCommand command = new AmalgaDbCommand();
        command.Connection = connection;
        command.CommandText =
                    @" INSERT INTO PatientNote (PatientPersonID, NoteText)
                    VALUES(@PersonID, @NoteText)";

        // Create parameters to safely take input for PersonID and NoteText
        AmalgaDbParameter personIdParam = new AmalgaDbParameter("@PersonID", patientID);
        AmalgaDbParameter noteTextParam = new AmalgaDbParameter("@NoteText", noteText);

        // Add parameters to the Parameters collection of the AmalgaDbCommand object.
        command.Parameters.Add(noteTextParam);
        command.Parameters.Add(personIdParam);

        // Write an entry into the diagnostic log providing information that the 
        // hosted service is about to insert a record.
        DiagLog.WriteInformation("Application {0} about to insert into PatientNote", 
            ApplicationConfiguration.InstanceName);

        // Open the connection and write to the read/write application view.
        try
        {
            // Open the connection for the AmalgaDbCommand object.
            command.Connection.Open();

            // Invoke the ExecuteNonQuery method to execute the command, because
            // the INSERT statement does not return any rows.
            command.ExecuteNonQuery();

            // Write an entry into the diagnostic log providing information that the 
            // hosted service has successfully inserted a record.
            DiagLog.WriteInformation("Note Inserted");
        }
        catch (Exception ex)
        {
            // Write an entry into the diagnostic log indicating that an exception
            // occurred while querying patients, including the exception in the 
            // diagnostic log entry.
            DiagLog.WriteException(ex, "Could not write data to the application virtual schema");

            // Write an entry into the Doors event log indicating that an exception
            // occurred. An administrator can see and monitor this error event in the 
            // Doors event viewer.
            EventLog.WriteErrorEntry(10001, "Error occured in application {0}: {1} {2}", 
                ApplicationConfiguration.InstanceName.ToString(), ex.Message, ex.StackTrace);
        }
    }
}
</pre>
        <p class="SeeAlso" MadCap:conditions="Production.doNOTbuild">See also</p>
        <p class="SeeAlsoSubHead" MadCap:conditions="Production.doNOTbuild">Tasks</p>
        <p MadCap:conditions="Production.doNOTbuild">[Cross reference or hyperlink if external resource]</p>
        <p class="SeeAlsoSubHead" MadCap:conditions="Production.doNOTbuild">References</p>
        <p MadCap:conditions="Production.doNOTbuild">[Cross reference or hyperlink if external resource]</p>
        <p class="SeeAlsoSubHead" MadCap:conditions="Production.doNOTbuild">Concepts</p>
        <p MadCap:conditions="Production.doNOTbuild">[Cross reference or hyperlink if external resource]</p>
        <p class="SeeAlsoSubHead" MadCap:conditions="Production.doNOTbuild">Other resources </p>
        <p MadCap:conditions="Production.doNOTbuild">[Cross reference or hyperlink if external resource]</p>
    </body>
</html>