<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2646" MadCap:lastWidth="544" MadCap:fileTags="TopicType.Concept,TopicOwner.StyleMasterResource" MadCap:conditions="Releases.Investigation Use">
    <head>
        <link href="../../Resources/Stylesheets/AmalgaMain.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1 style="font-style: normal;">Application private databases</h1>
        <p class="PersonaAll">&#160;</p>
        <p class="abstract">This topic provides an overview of application private databases in <MadCap:variable name="BrandingHSG.AmalgaV3 first use" />.</p>
        <p>Clinical data in <MadCap:variable name="BrandingHSG.AmalgaV3 first use" /> can be read, but not written to, by hosted applications, by using read-only application views defined in the virtual schema for that hosted application. Providing read-only access to clinical data by hosted applications ensures the integrity and consistency of that clinical data.</p>
        <p>However, hosted applications in <MadCap:variable name="BrandingHSG.AmalgaV3 first use" /> may need to write data specific to business needs of that application. For example, if a hosted application extended <MadCap:variable name="BrandingHSG.Amalga Short" /> functionality to include custom notes and alerts for providers, then the hosted application has to store information for those custom notes and alerts in a secure and consistent manner.</p>
        <p>Hosted applications can meet this need by using application private databases to store application-specific data. An application private database is a database created specifically for a single instance of a hosted application, accessed by using read-write application views defined in the virtual schema for that hosted application.  Hosted applications included with <MadCap:variable name="BrandingHSG.Amalga Short" />, such as the Terminology hosted application, also use application private databases and read-write application views to store application-specific information. For more information about read-write application views, see <MadCap:xref href="VS__CON_AppViews.htm" target="" title="" alt="">Application views on page 1</MadCap:xref>.</p>
        <p class="Label">In this topic</p>
        <ul>
            <li>
                <MadCap:xref href="#Defining" target="" title="" alt="">Defining an application private database on page 1</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="#Hosting" target="" title="" alt="">Hosting an application private database on page 1</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="#Configur" target="" title="" alt="">Configuring access to an application private database on page 1</MadCap:xref>
            </li>
        </ul>
        <h2><a name="Defining"></a>Defining an application private database</h2>
        <p>An application private database is defined only for hosted applications that use a virtual schema which includes read-write application views. Each read-write application view is associated with corresponding tables in the application virtual database, and each table receives a corresponding type in the application private database.</p>
        <p>The Transact-SQL script  for creating an application private database is generated by the VirtualSchema platform feature when the virtual schema for a hosted application is created. The data manifest used to create the virtual schema for a hosted application instance is used to generate the schema objects contained by the script, and metadata from the hosted application instance is used to identify the application private database.</p>
        <p>The Transact-SQL script used to generate an application private database can be accessed programmatically, as part of the information on a virtual schema, by using the VirtualSchema platform feature. For more information about finding information on a virtual schema by using the VirtualSchema platform feature, see <MadCap:xref href="VSS_CON_FindVSInfo.htm" target="" title="" alt="">Finding virtual schema information on page 1</MadCap:xref>.</p>
        <h3>Naming conventions for application private databases</h3>
        <p>By default, the database name for the application private database of a hosted application instance uses the following naming convention, replacing <span class="Placeholder">InstanceName</span> with the first 80 characters from the instance name of the hosted application and <span class="Placeholder">RandomFileName</span> with a random file name generated by the operating system:</p>
        <p class="InputText">AM_PRV_<span class="InputTextVariable">InstanceName</span>_<span class="InputTextVariable">RandomFileName</span></p>
        <p>The following naming conventions are used for the schema objects, such as tables and views, defined for the application private database.</p>
        <table style="width: 100%;">
            <col />
            <col />
            <tbody>
                <tr>
                    <th>Object type</th>
                    <th>Naming conventions</th>
                </tr>
                <tr>
                    <td>Database schemas</td>
                    <td>Only one database schema, named <span class="InputText">dbo</span>, is defined in the application private database.</td>
                </tr>
                <tr>
                    <td>Tables</td>
                    <td>
                        <p>A table is defined for each read-write application view using the following naming convention, replacing Name with the name of the application view:</p>
                        <p class="InputText">tbl_<span class="InputTextVariable">Name</span></p>
                    </td>
                </tr>
                <tr>
                    <td>Types</td>
                    <td>
                        <p>A type is defined for each read-write application view using the following naming convention, replacing Name with the name of the application view:</p>
                        <p class="InputText">type_<span class="InputTextVariable">Name</span></p>
                    </td>
                </tr>
                <tr>
                    <td>Views</td>
                    <td>
                        <p>A view is defined using the following naming convention, replacing Name with the name of the application view.</p>
                        <p class="InputText">vw_<span class="InputTextVariable">Name</span></p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2><a name="Hosting"></a>Creating an application private database</h2>
        <p>Typically, <MadCap:variable name="BrandingHSG.Amalga Short" /> generates the Transact-SQL script needed to create an application private database at the time the virtual schema is deployed. The Amalga administrator can then execute the Transact-SQL script at the time the virtual schema is deployed to create the corresponding application private database.</p>
        <p class="note">Do not change the generated Transact-SQL script for the application private database. The script is generated from metadata supplied by the hosted application instance and the data manifest, and changing the script can cause unexpected errors.</p>
        <p>The data host used to host an application private database is also determined at the time the virtual schema for a hosted application instance is created. The application private database must be created in the SQL&#160;Server instance for the data host specified when the virtual schema was created, using the Transact-SQL script provided by the VirtualSchema platform feature. For more information about creating a virtual schema, see <MadCap:xref href="VS__CON_VirtualSchema.htm" target="" title="" alt="">Virtual schemas on page 1</MadCap:xref>.</p>
        <h2><a name="Configur"></a>Configuring access to an application private database</h2>
        <p>You can use the application manifest of the hosted application to control access to read-write application views defined in the virtual schema of the hosted application. For each Resource element in the application manifest that identifies an application view, you can include one or more AccessLevel elements, each of which is used to identify an access level. The <MadCap:variable name="FeatureName.Management Console second use" /> can then be used to assign user roles to access levels, providing access to that application view for the users assigned to that user role. You can also include Role elements in each AccessLevel element, to automatically assign a role to an access level. For more information about application manifests, see .<MadCap:xref href="../DeploymentManifest/SDK_CON_Application_Manifests.htm" target="" title="" alt="">Application manifests on page 1</MadCap:xref></p>
        <p>Application access levels defined using the application manifest only control whether or not a role has access to an application view. You cannot use application access levels to, for example, restrict access to specific entity properties in an application view, nor can application access levels restrict access to the tables and columns contained in the underlying application private database.</p>
        <p>However, you can configure read-write and read-only access for data elements in an application private database by inheriting access rules from entities in the <MadCap:variable name="FeatureName.Amalga entity registry" />.</p>
        <p>Access inheritance is suggested in the virtual schema for the hosted application, with zero to one suggested parent entity per table in the application private database. You can use the <MadCap:variable name="FeatureName.Management Console second use" /> to enable or disable the suggested access inheritance for each table.</p>
        <p>For more information about configuring access to an application private database, see <MadCap:xref href="../../DataPlatform1/DP_Task_AppTableInherit.htm" target="" title="" alt="">Configure access inheritance for an application's private database tables on page 1</MadCap:xref>.</p>
        <p class="SeeAlso" MadCap:conditions="">See also</p>
        <p class="SeeAlsoSubHead" MadCap:conditions="Production.doNOTbuild">Tasks</p>
        <p MadCap:conditions="Production.doNOTbuild">[Cross reference or hyperlink if external resource]</p>
        <p class="SeeAlsoSubHead" MadCap:conditions="Production.doNOTbuild">References</p>
        <p MadCap:conditions="Production.doNOTbuild">[Cross reference or hyperlink if external resource]</p>
        <p class="SeeAlsoSubHead" MadCap:conditions="Production.doNOTbuild">Concepts</p>
        <p MadCap:conditions="">
            <MadCap:xref href="VS__CON_VirtualSchema.htm" target="" title="" alt="">Virtual schemas on page 1</MadCap:xref>
        </p>
        <p MadCap:conditions="">
            <MadCap:xref href="VS__CON_AppViews.htm" target="" title="" alt="">Application views on page 1</MadCap:xref>
        </p>
        <p class="SeeAlsoSubHead" MadCap:conditions="Production.doNOTbuild">Other resources </p>
        <p MadCap:conditions="Production.doNOTbuild">[Cross reference or hyperlink if external resource]</p>
    </body>
</html>